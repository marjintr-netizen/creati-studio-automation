name: Creati Studio Video Creator

on:
  workflow_dispatch:
    inputs:
      email:
        description: 'Creati Studio Email'
        required: true
        type: string
      password:
        description: 'Creati Studio Password'
        required: true
        type: string
      productDescription:
        description: 'Product Description'
        required: true
        type: string
      productImageUrl:
        description: 'Product Image URL'
        required: true
        type: string

jobs:
  create-video:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Playwright
      run: |
        npm init -y
        npm pkg set type=module
        npm install playwright
        
    - name: Install Playwright browsers
      run: npx playwright install chromium
      
    - name: Create and run automation
      run: |
        cat > automation.mjs << 'EOF'
        import { chromium } from 'playwright';
        import https from 'https';
        import fs from 'fs';

        const email = process.env.EMAIL;
        const password = process.env.PASSWORD;
        const productDescription = process.env.DESCRIPTION;
        const productImageUrl = process.env.IMAGE_URL;

        console.log('Creati Studio automation başlatılıyor...');

        async function takeScreenshot(page, name) {
            try {
                await page.screenshot({ path: `debug-${name}.png`, fullPage: true });
                console.log(`Screenshot alındı: debug-${name}.png`);
            } catch (error) {
                console.log(`Screenshot alınamadı: ${error.message}`);
            }
        }

        function downloadImage(url, filepath) {
            return new Promise((resolve, reject) => {
                const file = fs.createWriteStream(filepath);
                https.get(url, (response) => {
                    response.pipe(file);
                    file.on('finish', () => {
                        file.close();
                        resolve(filepath);
                    });
                }).on('error', (err) => {
                    fs.unlink(filepath, () => {});
                    reject(err);
                });
            });
        }

        async function createVideo() {
            const browser = await chromium.launch({ 
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            const page = await browser.newPage();
            
            try {
                console.log('1. Creati Studio\'ya gidiliyor');
                await page.goto('https://www.creati.studio/');
                await page.waitForTimeout(3000);
                await takeScreenshot(page, '01-homepage');
                
                console.log('2. Go Create butonuna tıklanıyor');
                await page.click('text=Go Create');
                await page.waitForTimeout(3000);
                await takeScreenshot(page, '02-after-go-create');
                
                console.log('3. Continue with email seçiliyor');
                await page.click('text=Continue with email');
                await page.waitForTimeout(3000);
                await takeScreenshot(page, '03-login-form');
                
                console.log('4. Email ve password giriliyor');
                await page.fill('input[type="email"]', email);
                await page.fill('input[type="password"]', password);
                await takeScreenshot(page, '04-filled-form');
                
                const submitSelectors = [
                    'button[type="submit"]',
                    'button:has-text("Sign in")',
                    'button:has-text("Log in")'
                ];
                
                for (const selector of submitSelectors) {
                    try {
                        await page.click(selector, { timeout: 5000 });
                        console.log('Giriş yapıldı');
                        break;
                    } catch (e) {
                        continue;
                    }
                }
                
                await page.waitForTimeout(8000);
                await takeScreenshot(page, '05-after-login');
                
                console.log('5. Templates sayfasına gidiliyor');
                await page.click('text=Templates');
                await page.waitForTimeout(3000);
                await takeScreenshot(page, '06-templates-page');
                
                console.log('6. Kadın template seçiliyor');
                const templateSelectors = [
                    'text="Cozy Bedroom"',
                    'text="Minimalist Female"'
                ];
                
                let templateSelected = false;
                for (const selector of templateSelectors) {
                    try {
                        await page.click(selector, { timeout: 3000 });
                        console.log(`Template seçildi: ${selector}`);
                        templateSelected = true;
                        break;
                    } catch (e) {
                        console.log(`Template bulunamadı: ${selector}`);
                        continue;
                    }
                }
                
                if (!templateSelected) {
                    console.log('Hiç template seçilemedi');
                    throw new Error('Template seçilemedi');
                }
                
                await page.waitForTimeout(5000);
                await takeScreenshot(page, '07-selected-template');
                
                console.log('7. Görsel upload işlemi');
                const tempImagePath = '/tmp/product_image.jpg';
                
                try {
                    await downloadImage(productImageUrl, tempImagePath);
                    console.log('Görsel indirildi');
                    
                    const uploadSelectors = [
                        'button:has-text("Upload product image")',
                        'text=Upload product image',
                        'button:has-text("Upload")'
                    ];
                    
                    for (const selector of uploadSelectors) {
                        try {
                            await page.click(selector, { timeout: 3000 });
                            console.log('Upload butonu bulundu');
                            break;
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    await page.waitForTimeout(2000);
                    
                    const fileInput = await page.$('input[type="file"]');
                    if (fileInput) {
                        await fileInput.setInputFiles(tempImagePath);
                        console.log('Dosya upload edildi');
                        
                        await page.waitForTimeout(3000);
                        const uploadedImageSelectors = [
                            'img[src*="blob:"]',
                            'img[src*="data:"]', 
                            '.uploaded-image',
                            '.preview-image',
                            '.image-preview img',
                            'img[alt*="upload"]'
                        ];
                        
                        let imageClicked = false;
                        for (const selector of uploadedImageSelectors) {
                            try {
                                const uploadedImage = await page.$(selector);
                                if (uploadedImage) {
                                    await uploadedImage.dblclick();
                                    console.log(`Görsele çift tıklandı: ${selector}`);
                                    imageClicked = true;
                                    break;
                                }
                            } catch (e) {
                                continue;
                            }
                        }
                        
                        if (!imageClicked) {
                            console.log('Upload edilmiş görsel bulunamadı');
                        }
                    }
                    
                } catch (error) {
                    console.error('Upload hatası:', error);
                }
                
                await page.waitForTimeout(3000);
                await takeScreenshot(page, '08-after-upload');
                
                console.log('8. Script alanı dolduruluyor');
                const scriptSelectors = [
                    'textarea',
                    'div[contenteditable="true"]'
                ];
                
                for (const selector of scriptSelectors) {
                    try {
                        await page.fill(selector, productDescription);
                        console.log('Script girildi');
                        break;
                    } catch (e) {
                        continue;
                    }
                }
                
                await page.waitForTimeout(2000);
                await takeScreenshot(page, '09-after-script');
                
                console.log('9. Video oluşturma başlatılıyor');
                const continueSelectors = [
                    'button:has-text("Continue")',
                    'button:has-text("Generate")',
                    'button:has-text("Create video")',
                    'button:has-text("Generate video")',
                    'button:has-text("Start generation")'
                ];
                
                for (const selector of continueSelectors) {
                    try {
                        await page.click(selector, { timeout: 5000 });
                        console.log(`Video oluşturma başlatıldı: ${selector}`);
                        break;
                    } catch (e) {
                        continue;
                    }
                }
                
                await takeScreenshot(page, '10-video-generation-started');
                console.log('İşlem tamamlandı');
                
            } catch (error) {
                console.error('Hata:', error);
                await takeScreenshot(page, '99-error');
                process.exit(1);
            } finally {
                await browser.close();
            }
        }

        await createVideo();
        EOF
        
        node automation.mjs
      env:
        EMAIL: ${{ github.event.inputs.email }}
        PASSWORD: ${{ github.event.inputs.password }}
        DESCRIPTION: ${{ github.event.inputs.productDescription }}
        IMAGE_URL: ${{ github.event.inputs.productImageUrl }}
    
    - name: Upload debug screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: debug-screenshots
        path: "*.png"
