name: Creati AI Upload Automation

on:
  workflow_dispatch:
    inputs:
      productDescription:
        description: 'Ürün açıklaması'
        required: true
        type: string
      productImageUrl:
        description: 'Ürün görsel URL'
        required: true
        type: string
      email:
        description: 'Creati Studio email'
        required: true
        type: string

jobs:
  creati-upload-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: |
        npm init -y
        npm pkg set type=module
        npm install playwright
        npx playwright install --with-deps chromium
      
    - name: Create automation script
      run: |
        cat > creati-automation.mjs << 'EOL'
        import { chromium } from 'playwright';
        import https from 'https';
        import fs from 'fs';

        // Environment variables
        const email = process.env.EMAIL;
        const password = process.env.PASSWORD;
        const productDescription = process.env.DESCRIPTION;
        const productImageUrl = process.env.IMAGE_URL;

        console.log('=== CREATI AI OTOMASYON BAŞLIYOR ===');
        console.log(`Email: ${email}`);
        console.log(`Ürün açıklaması: ${productDescription?.substring(0, 50)}...`);
        console.log(`Görsel URL: ${productImageUrl}`);

        async function takeScreenshot(page, name) {
            try {
                const filename = `${name}.png`;
                await page.screenshot({ path: filename, fullPage: true });
                console.log(`Screenshot: ${filename}`);
            } catch (error) {
                console.log(`Screenshot hatası: ${error.message}`);
            }
        }

        async function downloadImage(url, filepath) {
            return new Promise((resolve, reject) => {
                console.log(`Görsel indiriliyor: ${url}`);
                
                https.get(url, (response) => {
                    if (response.statusCode === 200) {
                        const fileStream = fs.createWriteStream(filepath);
                        response.pipe(fileStream);
                        
                        fileStream.on('finish', () => {
                            fileStream.close();
                            console.log(`Görsel indirildi: ${filepath}`);
                            resolve();
                        });
                        
                        fileStream.on('error', reject);
                    } else {
                        reject(new Error(`HTTP Error: ${response.statusCode}`));
                    }
                }).on('error', reject);
            });
        }

        async function retry(page, action, attempts = 5, delay = 3000) {
            for (let i = 0; i < attempts; i++) {
                try {
                    console.log(`Deneme ${i + 1}/${attempts}...`);
                    await action();
                    console.log(`Başarılı!`);
                    return true;
                } catch (error) {
                    console.log(`Hata: ${error.message}`);
                    if (i < attempts - 1) {
                        console.log(`${delay/1000}s bekleyip tekrar deneniyor...`);
                        await page.waitForTimeout(delay);
                    } else {
                        console.log(`Maksimum deneme sayısına ulaşıldı. Devam ediliyor...`);
                        return false;
                    }
                }
            }
            return false;
        }

        async function run() {
            // Görsel indir
            console.log('\nADIM 1: Ürün görseli indiriliyor...');
            const imagePath = './product-image.jpg';
            await downloadImage(productImageUrl, imagePath);
            console.log('Görsel başarıyla indirildi!');
            
            const browser = await chromium.launch({
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
            });
            
            const context = await browser.newContext({
                userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                viewport: { width: 1920, height: 1080 }
            });
            
            const page = await context.newPage();
            page.setDefaultTimeout(60000); // 60 saniye timeout
            
            try {
                // Login
                console.log('\nADIM 2: Giriş yapılıyor...');
                
                // Direkt login sayfasına git
                await page.goto('https://creati.studio/login', { 
                    waitUntil: 'domcontentloaded',
                    timeout: 60000 
                });
                await takeScreenshot(page, '01-login-page');
                await page.waitForTimeout(5000);
                
                // Email input alanını bul
                await retry(page, async () => {
                    console.log('Email ve şifre alanları aranıyor...');
                    
                    // Farklı selektörleri dene
                    const emailSelectors = [
                        'input[type="email"]',
                        'input[placeholder*="email" i]',
                        'input[name*="email" i]',
                        'form input:first-child',
                        'input.email',
                        '[data-testid*="email"]'
                    ];
                    
                    let emailInput = null;
                    for (const selector of emailSelectors) {
                        try {
                            emailInput = page.locator(selector).first();
                            if (await emailInput.isVisible()) {
                                console.log(`Email alanı bulundu: ${selector}`);
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    if (!emailInput || !(await emailInput.isVisible())) {
                        throw new Error('Email alanı bulunamadı');
                    }
                    
                    // Email gir
                    await emailInput.fill(email);
                    await page.waitForTimeout(1000);
                    
                    // Şifre gir
                    const passwordSelectors = [
                        'input[type="password"]',
                        'input[placeholder*="password" i]',
                        'input[name*="password" i]',
                        'form input:nth-child(2)',
                        'input.password',
                        '[data-testid*="password"]'
                    ];
                    
                    let passwordInput = null;
                    for (const selector of passwordSelectors) {
                        try {
                            passwordInput = page.locator(selector).first();
                            if (await passwordInput.isVisible()) {
                                console.log(`Şifre alanı bulundu: ${selector}`);
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    if (!passwordInput || !(await passwordInput.isVisible())) {
                        throw new Error('Şifre alanı bulunamadı');
                    }
                    
                    await passwordInput.fill(password);
                    await page.waitForTimeout(1000);
                    
                    // Login butonuna bas
                    const buttonSelectors = [
                        'button[type="submit"]',
                        'button:has-text("Log in")',
                        'button:has-text("Sign in")',
                        'button:has-text("Continue")',
                        'input[type="submit"]',
                        'form button'
                    ];
                    
                    let loginButton = null;
                    for (const selector of buttonSelectors) {
                        try {
                            loginButton = page.locator(selector).first();
                            if (await loginButton.isVisible()) {
                                console.log(`Login butonu bulundu: ${selector}`);
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    if (!loginButton || !(await loginButton.isVisible())) {
                        throw new Error('Login butonu bulunamadı');
                    }
                    
                    await loginButton.click();
                });
                
                // Login sonrası bekleme
                console.log('Login butonu tıklandı, dashboard bekleniyor...');
                await page.waitForTimeout(15000);
                await takeScreenshot(page, '02-after-login');
                
                // Manuel olarak Cozy Bedroom template'ine kadar gelindiği varsayılıyor
                console.log('\nNOT: Bu GitHub Actions ortamında çalışıyor.');
                console.log('Gerçek kullanımda, bu noktada siz manuel olarak:');
                console.log('1. Templates sayfasına gideceksiniz');
                console.log('2. Cozy Bedroom template\'ini seçeceksiniz');
                console.log('3. "Upload product image" ekranına geleceksiniz');
                console.log('4. Daha sonra bu otomasyonu başlatacaksınız.\n');
                
                // Upload product image aşaması için bekle
                console.log('\nADIM 3: Upload product image ve form doldurma...');
                await page.waitForTimeout(5000);
                
                // Upload butonuna tıkla
                console.log('Görsel yükleniyor...');
                try {
                    // Upload butonunu bul
                    const uploadSelectors = [
                        'button:has-text("Upload product image")',
                        'div:has-text("Upload product image")',
                        'button:has-text("Upload")',
                        'div:has-text("Upload")',
                        'input[type="file"]',
                        '[data-testid*="upload"]'
                    ];
                    
                    let uploadButton = null;
                    for (const selector of uploadSelectors) {
                        try {
                            uploadButton = page.locator(selector).first();
                            if (await uploadButton.isVisible()) {
                                console.log(`Upload butonu bulundu: ${selector}`);
                                
                                if (selector.includes('input[type="file"]')) {
                                    await uploadButton.setInputFiles(imagePath);
                                } else {
                                    await uploadButton.click();
                                    await page.waitForTimeout(3000);
                                    
                                    // File chooser'ı bekle
                                    const fileChooser = await page.waitForEvent('filechooser', { timeout: 10000 });
                                    await fileChooser.setFiles(imagePath);
                                }
                                
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    if (!uploadButton || !(await uploadButton.isVisible())) {
                        throw new Error('Upload butonu bulunamadı');
                    }
                } catch (error) {
                    console.log('Normal upload başarısız, doğrudan file input kullanılıyor...');
                    
                    // Doğrudan file input alanını bul
                    const fileInput = page.locator('input[type="file"]').first();
                    await fileInput.setInputFiles(imagePath);
                }
                
                await page.waitForTimeout(5000);
                await takeScreenshot(page, '03-image-uploaded');
                console.log('Görsel başarıyla yüklendi!');
                
                // Ürün açıklaması gir
                console.log('\nÜrün açıklaması giriliyor...');
                await retry(page, async () => {
                    const textSelectors = [
                        'textarea',
                        'input[placeholder*="text" i]',
                        'input[placeholder*="speech" i]',
                        'input[placeholder*="description" i]',
                        'input[type="text"]',
                        '[contenteditable="true"]'
                    ];
                    
                    let textInput = null;
                    for (const selector of textSelectors) {
                        try {
                            textInput = page.locator(selector).first();
                            if (await textInput.isVisible()) {
                                console.log(`Metin alanı bulundu: ${selector}`);
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    if (!textInput || !(await textInput.isVisible())) {
                        throw new Error('Metin alanı bulunamadı');
                    }
                    
                    await textInput.fill(productDescription);
                });
                
                await page.waitForTimeout(2000);
                
                // Dili Türkçe yap
                console.log('\nDil Türkçe yapılıyor...');
                try {
                    // English butonu veya dropdown'ı bul
                    const languageSelectors = [
                        'div:has-text("English")',
                        'button:has-text("English")',
                        'select[id*="language"]',
                        '[data-testid*="language"]'
                    ];
                    
                    let languageElement = null;
                    for (const selector of languageSelectors) {
                        try {
                            languageElement = page.locator(selector).first();
                            if (await languageElement.isVisible()) {
                                console.log(`Dil seçici bulundu: ${selector}`);
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    if (languageElement && await languageElement.isVisible()) {
                        await languageElement.click();
                        await page.waitForTimeout(2000);
                        
                        // Turkish seçeneğini bul
                        const turkishSelectors = [
                            'div:has-text("Turkish")',
                            'option:has-text("Turkish")',
                            '[data-value="tr"]',
                            '[value="tr"]',
                            'li:has-text("Turkish")'
                        ];
                        
                        for (const selector of turkishSelectors) {
                            try {
                                const turkishOption = page.locator(selector).first();
                                if (await turkishOption.isVisible()) {
                                    console.log(`Türkçe seçeneği bulundu: ${selector}`);
                                    await turkishOption.click();
                                    break;
                                }
                            } catch (e) {
                                continue;
                            }
                        }
                    } else {
                        console.log('Dil seçici bulunamadı, varsayılan dil kullanılacak');
                    }
                } catch (error) {
                    console.log(`Dil değiştirme hatası: ${error.message}. Varsayılan dil kullanılacak.`);
                }
                
                await page.waitForTimeout(2000);
                await takeScreenshot(page, '04-form-completed');
                
                // Continue butonuna bas
                console.log('\nContinue butonuna basılıyor...');
                await retry(page, async () => {
                    const buttonSelectors = [
                        'button:has-text("Continue")',
                        'button:has-text("Generate")',
                        'button:has-text("Create")',
                        'button[type="submit"]',
                        'button.primary',
                        '.btn-primary'
                    ];
                    
                    let continueButton = null;
                    for (const selector of buttonSelectors) {
                        try {
                            continueButton = page.locator(selector).first();
                            if (await continueButton.isVisible()) {
                                console.log(`Continue butonu bulundu: ${selector}`);
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    if (!continueButton || !(await continueButton.isVisible())) {
                        throw new Error('Continue butonu bulunamadı');
                    }
                    
                    await continueButton.click();
                });
                
                await page.waitForTimeout(5000);
                await takeScreenshot(page, '05-finished');
                
                console.log('\n=== BAŞARILI ===');
                console.log('Video oluşturma süreci başlatıldı!');
                console.log('Otomasyon tamamlandı.');
                
            } catch (error) {
                console.error(`\nHATA: ${error.message}`);
                await takeScreenshot(page, 'error');
                throw error;
            } finally {
                // Temizlik
                try {
                    if (fs.existsSync(imagePath)) {
                        fs.unlinkSync(imagePath);
                    }
                } catch (e) {
                    console.log(`Görsel dosyası silinemedi: ${e.message}`);
                }
                
                await browser.close();
            }
        }

        run().catch(error => {
            console.error('Otomasyon hatası:', error);
            process.exit(1);
        });
        EOL
        
        echo "Automation script created: creati-automation.mjs"
      
    - name: Run automation
      run: node creati-automation.mjs
      env:
        EMAIL: ${{ github.event.inputs.email }}
        PASSWORD: ${{ secrets.CREATI_STUDIO_PASSWORD }}
        DESCRIPTION: ${{ github.event.inputs.productDescription }}
        IMAGE_URL: ${{ github.event.inputs.productImageUrl }}
        PLAYWRIGHT_BROWSERS_PATH: '/home/runner/.cache/ms-playwright'
    
    - name: Upload debug files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-files-${{ github.run_number }}
        path: |
          *.png
          *.log
        retention-days: 5
