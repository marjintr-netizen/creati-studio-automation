name: Creati AI Upload Automation

on:
  workflow_dispatch:
    inputs:
      productDescription:
        description: 'Ürün açıklaması'
        required: true
        type: string
      productImageUrl:
        description: 'Ürün görsel URL'
        required: true
        type: string
      email:
        description: 'Creati Studio email'
        required: true
        type: string

jobs:
  creati-upload-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: |
        npm init -y
        npm pkg set type=module
        npm install playwright
        npx playwright install --with-deps chromium
      
    - name: Create automation script
      run: |
        cat > creati-automation.mjs << 'EOL'
        import { chromium } from 'playwright';
        import https from 'https';
        import fs from 'fs';

        // Environment variables
        const email = process.env.EMAIL;
        const password = process.env.PASSWORD;
        const productDescription = process.env.DESCRIPTION;
        const productImageUrl = process.env.IMAGE_URL;

        console.log('=== CREATI AI OTOMASYON BAŞLIYOR ===');
        console.log(`Email: ${email}`);
        console.log(`Ürün açıklaması: ${productDescription?.substring(0, 50)}...`);
        console.log(`Görsel URL: ${productImageUrl}`);

        async function downloadImage(url, filepath) {
            return new Promise((resolve, reject) => {
                console.log(`Görsel indiriliyor: ${url}`);
                
                https.get(url, (response) => {
                    if (response.statusCode === 200) {
                        const fileStream = fs.createWriteStream(filepath);
                        response.pipe(fileStream);
                        
                        fileStream.on('finish', () => {
                            fileStream.close();
                            console.log(`Görsel indirildi: ${filepath}`);
                            resolve();
                        });
                        
                        fileStream.on('error', reject);
                    } else {
                        reject(new Error(`HTTP Error: ${response.statusCode}`));
                    }
                }).on('error', reject);
            });
        }

        async function run() {
            // Görsel indir
            console.log('\nADIM 1: Ürün görseli indiriliyor...');
            const imagePath = './product-image.jpg';
            await downloadImage(productImageUrl, imagePath);
            console.log('Görsel başarıyla indirildi!');
            
            const browser = await chromium.launch({
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
            });
            
            const context = await browser.newContext({
                userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                viewport: { width: 1920, height: 1080 }
            });
            
            const page = await context.newPage();
            
            try {
                // Login
                console.log('\nADIM 2: Giriş yapılıyor...');
                await page.goto('https://creati.studio/login', { waitUntil: 'domcontentloaded' });
                await page.screenshot({ path: '01-login-page.png' });
                
                // Email input alanını bul ve doldur
                await page.locator('input[type="email"]').fill(email);
                await page.locator('input[type="password"]').fill(password);
                
                // Giriş yap butonuna tıkla
                await page.locator('button[type="submit"]').click();
                
                // Dashboard'a yönlendirmeyi bekle
                await page.waitForTimeout(10000);
                await page.screenshot({ path: '02-logged-in.png' });
                console.log('Başarıyla giriş yapıldı.');
                
                // Manuel olarak template seçim aşamasına gelindiği varsayılır
                // ve "Upload product image" kısmı için 60 saniye beklenir
                console.log('\nNOT: Bu GitHub Actions ortamında otomatik olarak çalışıyor.');
                console.log('Gerçek kullanımda, bu noktada siz manuel olarak:');
                console.log('1. Templates sayfasına gideceksiniz');
                console.log('2. Cozy Bedroom template\'ini seçeceksiniz');
                console.log('3. "Upload product image" ekranına geleceksiniz');
                console.log('4. Daha sonra bu otomasyonu başlatacaksınız.\n');
                
                // Upload product image aşaması - manuel seçimin bu aşamada olduğu varsayılır
                console.log('\nADIM 3: Upload product image ve form doldurma...');
                
                // Upload butonuna tıkla
                console.log('Görsel yükleniyor...');
                try {
                    const uploadButton = page.locator('button:has-text("Upload product image")').first();
                    await uploadButton.click();
                    await page.waitForTimeout(2000);
                    
                    const fileChooser = await page.waitForEvent('filechooser', { timeout: 5000 });
                    await fileChooser.setFiles(imagePath);
                } catch (error) {
                    console.log('Upload butonu ile yükleme başarısız, doğrudan file input kullanılıyor...');
                    
                    const fileInput = page.locator('input[type="file"]').first();
                    await fileInput.setInputFiles(imagePath);
                }
                
                await page.waitForTimeout(5000);
                await page.screenshot({ path: '03-image-uploaded.png' });
                console.log('Görsel başarıyla yüklendi!');
                
                // Ürün açıklaması gir
                console.log('Ürün açıklaması giriliyor...');
                try {
                    await page.locator('textarea, input[placeholder*="speech text"]').fill(productDescription);
                } catch (error) {
                    console.log('Speech text alanı bulunamadı, alternatif yöntem deneniyor...');
                    
                    await page.locator('input[type="text"]').first().fill(productDescription);
                }
                
                await page.waitForTimeout(2000);
                
                // Dili Türkçe yap
                console.log('Dil Türkçe yapılıyor...');
                try {
                    await page.locator('div:has-text("English")').first().click();
                    await page.waitForTimeout(1000);
                    await page.locator('div:has-text("Turkish")').first().click();
                } catch (error) {
                    console.log('Dil seçimi başarısız oldu, varsayılan dil kullanılacak.');
                }
                
                await page.waitForTimeout(2000);
                await page.screenshot({ path: '04-form-completed.png' });
                
                // Continue butonuna bas
                console.log('Continue butonuna basılıyor...');
                await page.locator('button:has-text("Continue")').click();
                
                await page.waitForTimeout(5000);
                await page.screenshot({ path: '05-finished.png' });
                
                console.log('\n=== BAŞARILI ===');
                console.log('Video oluşturma süreci başlatıldı!');
                console.log('Otomasyon tamamlandı.');
                
            } catch (error) {
                console.error(`\nHATA: ${error.message}`);
                await page.screenshot({ path: 'error.png' });
                throw error;
            } finally {
                // Temizlik
                if (fs.existsSync(imagePath)) {
                    fs.unlinkSync(imagePath);
                }
                
                await browser.close();
            }
        }

        run().catch(error => {
            console.error('Otomasyon hatası:', error);
            process.exit(1);
        });
        EOL
        
        echo "Automation script created: creati-automation.mjs"
      
    - name: Run automation
      run: node creati-automation.mjs
      env:
        EMAIL: ${{ github.event.inputs.email }}
        PASSWORD: ${{ secrets.CREATI_STUDIO_PASSWORD }}
        DESCRIPTION: ${{ github.event.inputs.productDescription }}
        IMAGE_URL: ${{ github.event.inputs.productImageUrl }}
        PLAYWRIGHT_BROWSERS_PATH: '/home/runner/.cache/ms-playwright'
    
    - name: Upload debug files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-files-${{ github.run_number }}
        path: |
          *.png
          *.log
        retention-days: 5
