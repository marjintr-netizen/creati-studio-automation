name: Creati AI Upload Automation

on:
  workflow_dispatch:
    inputs:
      productDescription:
        description: 'Ürün açıklaması'
        required: true
        type: string
      productImageUrl:
        description: 'Ürün görsel URL'
        required: true
        type: string

jobs:
  creati-upload-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: |
        npm init -y
        npm pkg set type=module
        npm install playwright
        npx playwright install --with-deps chromium
      
    - name: Create automation script
      run: |
        cat > creati-automation.mjs << 'EOL'
        import { chromium } from 'playwright';
        import https from 'https';
        import fs from 'fs';

        // Environment variables
        const productDescription = process.env.DESCRIPTION;
        const productImageUrl = process.env.IMAGE_URL;

        console.log('=== OTOMASYON BAŞLIYOR ===');
        console.log('Bu otomasyon sadece görsel yükleme ve form doldurma işlemlerini yapar.');
        console.log('LOGIN VE TEMPLATE SEÇİMİ MANUEL YAPILMALIDIR!');
        console.log('Otomasyon sadece "Upload product image" ekranında başlar.');
        
        console.log(`Ürün açıklaması: ${productDescription?.substring(0, 50)}...`);
        console.log(`Görsel URL: ${productImageUrl}`);

        async function takeScreenshot(page, name) {
            try {
                const filename = `${name}.png`;
                await page.screenshot({ path: filename, fullPage: true });
                console.log(`Screenshot: ${filename}`);
            } catch (error) {
                console.log(`Screenshot hatası: ${error.message}`);
            }
        }

        async function downloadImage(url, filepath) {
            return new Promise((resolve, reject) => {
                console.log(`Görsel indiriliyor: ${url}`);
                
                https.get(url, (response) => {
                    if (response.statusCode === 200) {
                        const fileStream = fs.createWriteStream(filepath);
                        response.pipe(fileStream);
                        
                        fileStream.on('finish', () => {
                            fileStream.close();
                            console.log(`Görsel indirildi: ${filepath}`);
                            resolve();
                        });
                        
                        fileStream.on('error', reject);
                    } else {
                        reject(new Error(`HTTP Error: ${response.statusCode}`));
                    }
                }).on('error', reject);
            });
        }

        async function retry(page, action, attempts = 5, delay = 3000) {
            for (let i = 0; i < attempts; i++) {
                try {
                    console.log(`Deneme ${i + 1}/${attempts}...`);
                    await action();
                    console.log(`Başarılı!`);
                    return true;
                } catch (error) {
                    console.log(`Hata: ${error.message}`);
                    if (i < attempts - 1) {
                        console.log(`${delay/1000}s bekleyip tekrar deneniyor...`);
                        await page.waitForTimeout(delay);
                    } else {
                        console.log(`Maksimum deneme sayısına ulaşıldı. Devam ediliyor...`);
                        return false;
                    }
                }
            }
            return false;
        }

        async function uploadAndProcess() {
            console.log('\n== LÜTFEN OKUYUN ==');
            console.log('BU OTOMASYON İÇİN:');
            console.log('1. Creati AI hesabınıza giriş yapın');
            console.log('2. Templates sayfasına gidin');
            console.log('3. Cozy Bedroom template\'ini seçin');
            console.log('4. Use/Create butonuna basın');
            console.log('5. Upload product image ekranına gelin');
            console.log('6. SONRA workflow\'u başlatın');
            console.log('7. 45 saniye içinde template seçilmiş ve upload sayfasına gelinmiş olmalı\n');
            
            // Görsel indir
            console.log('Ürün görseli indiriliyor...');
            const imagePath = './product-image.jpg';
            await downloadImage(productImageUrl, imagePath);
            
            // Bu noktada manuel seçim için bekliyoruz, bu kısım placeholder
            console.log('DİKKAT: Bu GitHub Actions\'da otomatik çalışacak, fakat bilgisayarınızda manuel olarak template seçimi yapmanız gerekiyor!');
            console.log('GitHub Actions bu noktada template seçilmiş ve upload sayfasına gelinmiş olduğunu varsayar.');
            
            const browser = await chromium.launch({
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
            });
            
            const context = await browser.newContext({
                userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                viewport: { width: 1920, height: 1080 }
            });
            
            const page = await context.newPage();
            page.setDefaultTimeout(60000);

            try {
                // NOT: Bu kısım sadece simulasyon amaçlı, GitHub Actions'da çalışmayacak
                // Gerçek senaryoda, kullanıcı manuel olarak bu adıma kadar gelmiş olmalı
                await page.goto('https://creati.studio/upload-page-placeholder', { waitUntil: 'domcontentloaded' });
                console.log('Upload sayfasına gelindi (GitHub Actions\'da bu adım atlanır)');
                await takeScreenshot(page, '01-upload-page');
                
                // 1. UPLOAD İŞLEMİ
                console.log('\nADIM 1: Görsel upload ediliyor...');
                await retry(page, async () => {
                    // Upload product image alanını bul ve tıkla
                    const uploadSelectors = [
                        'input[type="file"]',
                        'button:has-text("Upload")',
                        'div:has-text("Upload product image")',
                        'div:has-text("Choose File")',
                        '[data-testid*="upload"]',
                        '[role="button"]:has-text("Upload")'
                    ];
                    
                    for (const selector of uploadSelectors) {
                        try {
                            const uploadElement = page.locator(selector).first();
                            
                            if (await uploadElement.isVisible()) {
                                console.log(`Upload alanı bulundu: ${selector}`);
                                
                                if (selector.includes('input[type="file"]')) {
                                    await uploadElement.setInputFiles(imagePath);
                                } else {
                                    await uploadElement.click();
                                    await page.waitForTimeout(3000);
                                    
                                    // File input element may appear after clicking the button
                                    const fileInput = page.locator('input[type="file"]').first();
                                    await fileInput.setInputFiles(imagePath);
                                }
                                
                                await page.waitForTimeout(5000);
                                return;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    throw new Error('Upload alanı bulunamadı');
                });
                
                await takeScreenshot(page, '02-image-uploaded');
                console.log('Görsel yüklendi');
                
                // 2. ÜRÜN AÇIKLAMASI
                console.log('\nADIM 2: Ürün açıklaması giriliyor...');
                await retry(page, async () => {
                    const textSelectors = [
                        'textarea',
                        'input[type="text"]',
                        'input[placeholder*="text" i]',
                        'input[placeholder*="speech" i]',
                        'input[placeholder*="script" i]',
                        'input[placeholder*="description" i]',
                        '[contenteditable="true"]',
                        '[role="textbox"]'
                    ];
                    
                    for (const selector of textSelectors) {
                        try {
                            const textElement = page.locator(selector).first();
                            
                            if (await textElement.isVisible()) {
                                console.log(`Metin alanı bulundu: ${selector}`);
                                await textElement.fill(productDescription);
                                await page.waitForTimeout(2000);
                                return;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    throw new Error('Metin alanı bulunamadı');
                });
                
                // 3. DİL AYARI
                console.log('\nADIM 3: Dil Türkçe yapılıyor...');
                try {
                    const languageSelectors = [
                        'select[name*="language" i]',
                        'div:has-text("English") >> visible=true',
                        'button:has-text("English")',
                        '.dropdown:has-text("English")',
                        '[role="combobox"]'
                    ];
                    
                    for (const selector of languageSelectors) {
                        try {
                            const langElement = page.locator(selector).first();
                            
                            if (await langElement.isVisible()) {
                                console.log(`Dil seçim alanı bulundu: ${selector}`);
                                await langElement.click();
                                await page.waitForTimeout(2000);
                                
                                // Türkçe seçeneğini ara
                                const turkishSelectors = [
                                    'text="Turkish"',
                                    'text="Türkçe"',
                                    'option[value="tr"]',
                                    '[data-value="tr"]'
                                ];
                                
                                for (const turkishSelector of turkishSelectors) {
                                    try {
                                        const turkishOption = page.locator(turkishSelector).first();
                                        if (await turkishOption.isVisible()) {
                                            console.log(`Türkçe seçeneği bulundu: ${turkishSelector}`);
                                            await turkishOption.click();
                                            await page.waitForTimeout(2000);
                                            break;
                                        }
                                    } catch (e) {
                                        continue;
                                    }
                                }
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                } catch (e) {
                    console.log(`Dil seçimi sırasında hata: ${e.message}. Varsayılan dil kullanılacak.`);
                }
                
                await takeScreenshot(page, '03-form-completed');
                console.log('Form dolduruldu');
                
                // 4. GENERATE/CONTINUE
                console.log('\nADIM 4: Video oluşturma başlatılıyor...');
                await retry(page, async () => {
                    const buttonSelectors = [
                        'button:has-text("Continue")',
                        'button:has-text("Generate")',
                        'button:has-text("Create")',
                        'button:has-text("Next")',
                        'button[type="submit"]',
                        '.btn-primary',
                        'button.primary'
                    ];
                    
                    for (const selector of buttonSelectors) {
                        try {
                            const button = page.locator(selector).first();
                            
                            if (await button.isVisible()) {
                                console.log(`Buton bulundu: ${selector}`);
                                await button.click();
                                await page.waitForTimeout(10000);
                                return;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    throw new Error('Continue/Generate butonu bulunamadı');
                });
                
                await takeScreenshot(page, '04-generation-started');
                
                // Success indicator bekle
                await page.waitForTimeout(5000);
                await takeScreenshot(page, '05-final-state');

                console.log('\n=== BAŞARILI ===');
                console.log('Video oluşturma süreci başlatıldı!');
                console.log('Otomasyon tamamlandı.');

            } catch (error) {
                console.error(`\nHATA: ${error.message}`);
                await takeScreenshot(page, 'error-final');
                
                const html = await page.content();
                fs.writeFileSync('error-page.html', html);
                console.log('Hata sayfası kaydedildi: error-page.html');
                
                throw error;
            } finally {
                // Cleanup
                try {
                    if (fs.existsSync('./product-image.jpg')) {
                        fs.unlinkSync('./product-image.jpg');
                    }
                } catch (e) {}
                
                await browser.close();
                console.log('Browser kapatıldı.');
            }
        }

        uploadAndProcess().catch(error => {
            console.error('Ana hata:', error);
            process.exit(1);
        });
        EOL
        
        echo "Automation script created: creati-automation.mjs"
      
    - name: Run automation
      run: node creati-automation.mjs
      env:
        DESCRIPTION: ${{ github.event.inputs.productDescription }}
        IMAGE_URL: ${{ github.event.inputs.productImageUrl }}
        PLAYWRIGHT_BROWSERS_PATH: '/home/runner/.cache/ms-playwright'
    
    - name: Upload debug files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-files-${{ github.run_number }}
        path: |
          *.png
          *.html
          *.log
        retention-days: 5
