name: Creati AI Upload Automation

on:
  workflow_dispatch:
    inputs:
      productDescription:
        description: 'Ürün açıklaması'
        required: true
        type: string
      productImageUrl:
        description: 'Ürün görsel URL'
        required: true
        type: string
      email:
        description: 'Creati Studio email'
        required: true
        type: string

jobs:
  creati-upload-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: |
        npm init -y
        npm pkg set type=module
        npm install playwright
        npx playwright install --with-deps chromium
      
    - name: Create automation script
      run: |
        cat > creati-automation.mjs << 'EOL'
        import { chromium } from 'playwright';
        import https from 'https';
        import fs from 'fs';

        // Environment variables
        const email = process.env.EMAIL;
        const password = process.env.PASSWORD;
        const productDescription = process.env.DESCRIPTION;
        const productImageUrl = process.env.IMAGE_URL;

        console.log('=== CREATI AI OTOMASYON BAŞLIYOR ===');
        console.log(`Email: ${email}`);
        console.log(`Ürün açıklaması: ${productDescription?.substring(0, 50)}...`);
        console.log(`Görsel URL: ${productImageUrl}`);

        async function takeScreenshot(page, name) {
            try {
                const filename = `${name}.png`;
                await page.screenshot({ path: filename, fullPage: true });
                console.log(`Screenshot: ${filename}`);
            } catch (error) {
                console.log(`Screenshot hatası: ${error.message}`);
            }
        }

        async function downloadImage(url, filepath) {
            return new Promise((resolve, reject) => {
                console.log(`Görsel indiriliyor: ${url}`);
                
                https.get(url, (response) => {
                    if (response.statusCode === 200) {
                        const fileStream = fs.createWriteStream(filepath);
                        response.pipe(fileStream);
                        
                        fileStream.on('finish', () => {
                            fileStream.close();
                            console.log(`Görsel indirildi: ${filepath}`);
                            resolve();
                        });
                        
                        fileStream.on('error', reject);
                    } else {
                        reject(new Error(`HTTP Error: ${response.statusCode}`));
                    }
                }).on('error', reject);
            });
        }

        async function retry(page, action, attempts = 5, delay = 3000) {
            for (let i = 0; i < attempts; i++) {
                try {
                    console.log(`Deneme ${i + 1}/${attempts}...`);
                    await action();
                    console.log(`Başarılı!`);
                    return true;
                } catch (error) {
                    console.log(`Hata: ${error.message}`);
                    if (i < attempts - 1) {
                        console.log(`${delay/1000}s bekleyip tekrar deneniyor...`);
                        await page.waitForTimeout(delay);
                    } else {
                        console.log(`Maksimum deneme sayısına ulaşıldı. Devam ediliyor...`);
                        return false;
                    }
                }
            }
            return false;
        }

        async function createVideo() {
            const browser = await chromium.launch({
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
            });
            
            const context = await browser.newContext({
                userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                viewport: { width: 1920, height: 1080 }
            });
            
            const page = await context.newPage();
            page.setDefaultTimeout(60000);

            try {
                // Görsel indir
                console.log('\nADIM 0: Ürün görseli indiriliyor...');
                const imagePath = './product-image.jpg';
                await downloadImage(productImageUrl, imagePath);
                
                // ADIM 1: Login işlemi
                console.log('\nADIM 1: Login işlemi...');
                
                // Ana sayfaya git
                await page.goto('https://creati.ai/', { 
                    waitUntil: 'domcontentloaded',
                    timeout: 60000 
                });
                await page.waitForTimeout(5000);
                await takeScreenshot(page, '01-homepage');
                
                // Go Create butonuna tıkla
                await retry(page, async () => {
                    console.log('Go Create butonunu arıyor...');
                    
                    // Alternatif selektörler dene
                    const selectors = [
                        'text="Go Create"',
                        'button:has-text("Go Create")',
                        '.landing-page button',
                        'a:has-text("Create")',
                        'a:has-text("Studio")',
                        '[href*="studio"]'
                    ];
                    
                    for (const selector of selectors) {
                        try {
                            const button = page.locator(selector).first();
                            if (await button.isVisible()) {
                                console.log(`Go Create butonu bulundu: ${selector}`);
                                await button.click();
                                await page.waitForTimeout(5000);
                                return;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    // Buton bulunamadıysa studio sayfasına direkt git
                    console.log('Go Create butonu bulunamadı, direkt studio sayfasına gidiliyor');
                    await page.goto('https://creati.studio/login', { waitUntil: 'domcontentloaded' });
                    await page.waitForTimeout(5000);
                });
                
                await takeScreenshot(page, '02-login-page');
                
                // Continue with email butonuna tıkla
                await retry(page, async () => {
                    console.log('Continue with Email butonunu arıyor...');
                    
                    const selectors = [
                        'text="Continue with Email"',
                        'button:has-text("Continue with Email")',
                        '.auth-options >> text=Email',
                        'button:has-text("Email")',
                        'a:has-text("Email")'
                    ];
                    
                    for (const selector of selectors) {
                        try {
                            const button = page.locator(selector).first();
                            if (await button.isVisible()) {
                                console.log(`Email butonu bulundu: ${selector}`);
                                await button.click();
                                await page.waitForTimeout(5000);
                                return;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    // Email input alanı doğrudan görünüyorsa buton aramaya gerek yok
                    if (await page.locator('input[type="email"]').isVisible()) {
                        console.log('Email formu zaten görünür durumda');
                        return;
                    }
                    
                    throw new Error('Continue with Email butonu bulunamadı');
                });
                
                // Email ve şifre gir
                await retry(page, async () => {
                    console.log('Email ve şifre giriyor...');
                    
                    await page.locator('input[type="email"]').fill(email);
                    await page.waitForTimeout(1000);
                    
                    const passwordInput = page.locator('input[type="password"]');
                    await passwordInput.fill(password);
                    await page.waitForTimeout(1000);
                    
                    // Login/Continue butonunu bul
                    const buttonSelectors = [
                        'button:has-text("Log in")',
                        'button:has-text("Continue")',
                        'button:has-text("Sign in")',
                        'button[type="submit"]',
                        'form button'
                    ];
                    
                    for (const selector of buttonSelectors) {
                        try {
                            const button = page.locator(selector).first();
                            if (await button.isVisible()) {
                                console.log(`Login butonu bulundu: ${selector}`);
                                await button.click();
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    // Dashboard'a yönlendirmeyi bekle
                    await page.waitForTimeout(10000);
                });
                
                await takeScreenshot(page, '03-logged-in');
                console.log('Login işlemi tamamlandı');
                
                // ADIM 2: Templates sayfasına git
                console.log('\nADIM 2: Templates sayfasına git');
                
                // Templates sayfasına gitmeyi dene
                await retry(page, async () => {
                    console.log('Templates linkini arıyor...');
                    
                    const selectors = [
                        'a:has-text("Templates")',
                        'nav >> text=Templates',
                        '[href*="templates"]',
                        'a:has-text("Browse")',
                        'button:has-text("Templates")'
                    ];
                    
                    for (const selector of selectors) {
                        try {
                            const link = page.locator(selector).first();
                            if (await link.isVisible()) {
                                console.log(`Templates linki bulundu: ${selector}`);
                                await link.click();
                                await page.waitForTimeout(10000);
                                return;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    // Link bulunamadıysa doğrudan templates sayfasına git
                    console.log('Templates linki bulunamadı, doğrudan templates sayfasına gidiliyor');
                    await page.goto('https://creati.studio/templates', { waitUntil: 'domcontentloaded' });
                    await page.waitForTimeout(10000);
                });
                
                await takeScreenshot(page, '04-templates-page');
                console.log('Templates sayfasına erişildi');
                
                // ADIM 3: Cozy Bedroom Template'i Bul
                console.log('\nADIM 3: Cozy Bedroom template\'ini arıyor...');
                
                // Cozy Bedroom template'ini aramayı dene
                let templateFound = await retry(page, async () => {
                    const selectors = [
                        'text="Cozy Bedroom"',
                        'text="bedroom"',
                        'text="Bedroom"',
                        'text="cozy"',
                        'text="Cozy"'
                    ];
                    
                    for (const selector of selectors) {
                        try {
                            const template = page.locator(selector).first();
                            if (await template.isVisible()) {
                                console.log(`Template bulundu: ${selector}`);
                                await template.click();
                                await page.waitForTimeout(5000);
                                
                                // Use butonuna bas
                                const useSelectors = [
                                    'button:has-text("Use")',
                                    'button:has-text("Create")',
                                    'button:has-text("Select")',
                                    'button.primary'
                                ];
                                
                                for (const useSelector of useSelectors) {
                                    try {
                                        const useButton = page.locator(useSelector).first();
                                        if (await useButton.isVisible()) {
                                            console.log(`Use butonu bulundu: ${useSelector}`);
                                            await useButton.click();
                                            await page.waitForTimeout(10000);
                                            return true;
                                        }
                                    } catch (e) {
                                        continue;
                                    }
                                }
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    throw new Error('Cozy Bedroom template bulunamadı');
                });
                
                // Template bulunamadıysa, rastgele bir template seç
                if (!templateFound) {
                    console.log('Cozy Bedroom bulunamadı, rastgele bir template seçiliyor...');
                    
                    await retry(page, async () => {
                        // Herhangi bir template seç
                        const cards = await page.locator('.card, .template-card, article, [role="article"]').all();
                        
                        if (cards.length > 0) {
                            const randomIndex = Math.floor(Math.random() * Math.min(5, cards.length));
                            console.log(`Rastgele template seçiliyor: ${randomIndex+1}/${cards.length}`);
                            
                            await cards[randomIndex].click();
                            await page.waitForTimeout(5000);
                            
                            // Use butonuna bas
                            const useSelectors = [
                                'button:has-text("Use")',
                                'button:has-text("Create")',
                                'button:has-text("Select")',
                                'button.primary'
                            ];
                            
                            for (const useSelector of useSelectors) {
                                try {
                                    const useButton = page.locator(useSelector).first();
                                    if (await useButton.isVisible()) {
                                        console.log(`Use butonu bulundu: ${useSelector}`);
                                        await useButton.click();
                                        await page.waitForTimeout(10000);
                                        return true;
                                    }
                                } catch (e) {
                                    continue;
                                }
                            }
                            
                            throw new Error('Use butonu bulunamadı');
                        } else {
                            throw new Error('Hiç template bulunamadı');
                        }
                    });
                }
                
                await takeScreenshot(page, '05-template-selected');
                console.log('Template seçildi');
                
                // ADIM 4: Upload ve Form Doldurma
                console.log('\nADIM 4: Upload ve form doldurma');
                
                // Upload işlemi
                await retry(page, async () => {
                    console.log('Upload alanını arıyor...');
                    
                    const uploadSelectors = [
                        'input[type="file"]',
                        'button:has-text("Upload")',
                        'div:has-text("Upload product image")',
                        'div:has-text("Choose File")',
                        '[data-testid*="upload"]',
                        '[role="button"]:has-text("Upload")'
                    ];
                    
                    for (const selector of uploadSelectors) {
                        try {
                            const uploadElement = page.locator(selector).first();
                            
                            if (await uploadElement.isVisible()) {
                                console.log(`Upload alanı bulundu: ${selector}`);
                                
                                if (selector.includes('input[type="file"]')) {
                                    await uploadElement.setInputFiles(imagePath);
                                } else {
                                    await uploadElement.click();
                                    await page.waitForTimeout(3000);
                                    
                                    // File input element may appear after clicking the button
                                    const fileInput = page.locator('input[type="file"]').first();
                                    await fileInput.setInputFiles(imagePath);
                                }
                                
                                await page.waitForTimeout(5000);
                                return;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    throw new Error('Upload alanı bulunamadı');
                });
                
                await takeScreenshot(page, '06-image-uploaded');
                console.log('Görsel yüklendi');
                
                // Açıklama girme
                await retry(page, async () => {
                    console.log('Açıklama alanını arıyor...');
                    
                    const textSelectors = [
                        'textarea',
                        'input[type="text"]',
                        'input[placeholder*="text" i]',
                        'input[placeholder*="speech" i]',
                        'input[placeholder*="script" i]',
                        'input[placeholder*="description" i]',
                        '[contenteditable="true"]',
                        '[role="textbox"]'
                    ];
                    
                    for (const selector of textSelectors) {
                        try {
                            const textElement = page.locator(selector).first();
                            
                            if (await textElement.isVisible()) {
                                console.log(`Metin alanı bulundu: ${selector}`);
                                await textElement.fill(productDescription);
                                await page.waitForTimeout(2000);
                                return;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    throw new Error('Metin alanı bulunamadı');
                });
                
                // Dil seçimi
                try {
                    console.log('Dil seçim alanını arıyor...');
                    
                    const languageSelectors = [
                        'select[name*="language" i]',
                        'div:has-text("English") >> visible=true',
                        'button:has-text("English")',
                        '.dropdown:has-text("English")',
                        '[role="combobox"]'
                    ];
                    
                    for (const selector of languageSelectors) {
                        try {
                            const langElement = page.locator(selector).first();
                            
                            if (await langElement.isVisible()) {
                                console.log(`Dil seçim alanı bulundu: ${selector}`);
                                await langElement.click();
                                await page.waitForTimeout(2000);
                                
                                // Türkçe seçeneğini ara
                                const turkishSelectors = [
                                    'text="Turkish"',
                                    'text="Türkçe"',
                                    'option[value="tr"]',
                                    '[data-value="tr"]'
                                ];
                                
                                for (const turkishSelector of turkishSelectors) {
                                    try {
                                        const turkishOption = page.locator(turkishSelector).first();
                                        if (await turkishOption.isVisible()) {
                                            console.log(`Türkçe seçeneği bulundu: ${turkishSelector}`);
                                            await turkishOption.click();
                                            await page.waitForTimeout(2000);
                                            break;
                                        }
                                    } catch (e) {
                                        continue;
                                    }
                                }
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                } catch (e) {
                    console.log(`Dil seçimi sırasında hata: ${e.message}. Varsayılan dil kullanılacak.`);
                }
                
                await takeScreenshot(page, '07-form-completed');
                console.log('Form dolduruldu');
                
                // Continue / Generate butonuna tıklama
                await retry(page, async () => {
                    console.log('Continue/Generate butonunu arıyor...');
                    
                    const buttonSelectors = [
                        'button:has-text("Continue")',
                        'button:has-text("Generate")',
                        'button:has-text("Create")',
                        'button:has-text("Next")',
                        'button[type="submit"]',
                        '.btn-primary',
                        'button.primary'
                    ];
                    
                    for (const selector of buttonSelectors) {
                        try {
                            const button = page.locator(selector).first();
                            
                            if (await button.isVisible()) {
                                console.log(`Buton bulundu: ${selector}`);
                                await button.click();
                                await page.waitForTimeout(10000);
                                return;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    throw new Error('Continue/Generate butonu bulunamadı');
                });
                
                await takeScreenshot(page, '08-generation-started');
                console.log('Video oluşturma başlatıldı');
                
                // İşlem tamamlandı
                console.log('\n=== BAŞARILI ===');
                console.log('Video oluşturma süreci başlatıldı!');
                console.log('Otomasyon tamamlandı.');
                
            } catch (error) {
                console.error(`\nHATA: ${error.message}`);
                await takeScreenshot(page, 'error-final');
                
                try {
                    const html = await page.content();
                    fs.writeFileSync('error-page.html', html);
                    console.log('Hata sayfası kaydedildi: error-page.html');
                } catch (e) {
                    console.log(`Sayfa içeriği kaydedilemedi: ${e.message}`);
                }
                
                throw error;
            } finally {
                // Cleanup
                try {
                    if (fs.existsSync('./product-image.jpg')) {
                        fs.unlinkSync('./product-image.jpg');
                    }
                } catch (e) {
                    console.log(`Görsel dosyası silinemedi: ${e.message}`);
                }
                
                await browser.close();
                console.log('Browser kapatıldı.');
            }
        }

        createVideo().catch(error => {
            console.error('Ana hata:', error);
            process.exit(1);
        });
        EOL
        
        echo "Automation script created: creati-automation.mjs"
      
    - name: Run automation
      run: node creati-automation.mjs
      env:
        EMAIL: ${{ github.event.inputs.email }}
        PASSWORD: ${{ secrets.CREATI_STUDIO_PASSWORD }}
        DESCRIPTION: ${{ github.event.inputs.productDescription }}
        IMAGE_URL: ${{ github.event.inputs.productImageUrl }}
        PLAYWRIGHT_BROWSERS_PATH: '/home/runner/.cache/ms-playwright'
    
    - name: Upload debug files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-files-${{ github.run_number }}
        path: |
          *.png
          *.html
          *.log
        retention-days: 5
