name: Creati AI Upload Automation

on:
  workflow_dispatch:
    inputs:
      productDescription:
        description: 'Ürün açıklaması'
        required: true
        type: string
      productImageUrl:
        description: 'Ürün görsel URL'
        required: true
        type: string
      email:
        description: 'Creati Studio email'
        required: true
        type: string

jobs:
  creati-upload-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: |
        npm init -y
        npm pkg set type=module
        npm install playwright
        npx playwright install --with-deps chromium
      
    - name: Create automation script
      run: |
        cat > creati-automation.mjs << 'EOL'
        import { chromium } from 'playwright';
        import https from 'https';
        import fs from 'fs';

        // Environment variables
        const email = process.env.EMAIL;
        const password = process.env.PASSWORD;
        const productDescription = process.env.DESCRIPTION;
        const productImageUrl = process.env.IMAGE_URL;

        console.log('=== CREATI AI OTOMASYON BAŞLIYOR ===');
        console.log(`Email: ${email}`);
        console.log(`Ürün açıklaması: ${productDescription?.substring(0, 50)}...`);
        console.log(`Görsel URL: ${productImageUrl}`);

        async function takeScreenshot(page, name) {
            try {
                const filename = `${name}.png`;
                await page.screenshot({ path: filename, fullPage: true });
                console.log(`Screenshot: ${filename}`);
            } catch (error) {
                console.log(`Screenshot hatası: ${error.message}`);
            }
        }

        async function downloadImage(url, filepath) {
            return new Promise((resolve, reject) => {
                console.log(`Görsel indiriliyor: ${url}`);
                
                https.get(url, (response) => {
                    if (response.statusCode === 200) {
                        const fileStream = fs.createWriteStream(filepath);
                        response.pipe(fileStream);
                        
                        fileStream.on('finish', () => {
                            fileStream.close();
                            console.log(`Görsel indirildi: ${filepath}`);
                            resolve();
                        });
                        
                        fileStream.on('error', reject);
                    } else {
                        reject(new Error(`HTTP Error: ${response.statusCode}`));
                    }
                }).on('error', reject);
            });
        }

        async function run() {
            // Görsel indir
            console.log('\nADIM 1: Ürün görseli indiriliyor...');
            const imagePath = './product-image.jpg';
            await downloadImage(productImageUrl, imagePath);
            console.log('Görsel başarıyla indirildi!');
            
            const browser = await chromium.launch({
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
            });
            
            const context = await browser.newContext({
                userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                viewport: { width: 1920, height: 1080 }
            });
            
            const page = await context.newPage();
            page.setDefaultTimeout(90000); // 90 saniye timeout
            
            try {
                // Login
                console.log('\nADIM 2: Giriş yapılıyor...');
                await page.goto('https://creati.studio/login', { waitUntil: 'domcontentloaded' });
                await takeScreenshot(page, '01-login-page');
                
                // Email girişi
                console.log('Email giriliyor...');
                try {
                    await page.waitForSelector('input[type="email"]', { timeout: 30000 });
                    await page.fill('input[type="email"]', email);
                    await page.fill('input[type="password"]', password);
                    await page.click('button[type="submit"]');
                } catch (error) {
                    console.log(`Login form hatası: ${error.message}`);
                    throw error;
                }
                
                // Login başarılı mı kontrol et
                await page.waitForTimeout(10000);
                await takeScreenshot(page, '02-after-login');
                
                // MANUEL ADIMLAR İÇİN BİLGİLENDİRME
                console.log('\nNOT: GitHub Actions ortamında otomatik çalışıyor.');
                console.log('MANUEL ADIMLAR (gerçek ortamda):');
                console.log('1. Templates sayfasına git');
                console.log('2. Cozy Bedroom template\'ini seç');
                console.log('3. "Upload product image" ekranına gel');
                console.log('4. Otomasyonu bu noktada başlat');
                
                // 3. GÖRSEL YÜKLEME - TÜM OLASI SELEKTÖRLERİ DENE
                console.log('\nADIM 3: Görsel yükleniyor...');
                
                // 3.1 Doğrudan input[type="file"]
                try {
                    console.log('Yöntem 1: Doğrudan file input alanı');
                    
                    // Sayfadaki tüm input elementlerini bul
                    const inputs = await page.$$('input');
                    let fileInputFound = false;
                    
                    for (const input of inputs) {
                        try {
                            const type = await input.getAttribute('type');
                            if (type === 'file') {
                                console.log('File input alanı bulundu');
                                await input.setInputFiles(imagePath);
                                fileInputFound = true;
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                    
                    if (!fileInputFound) {
                        throw new Error('File input alanı bulunamadı');
                    }
                } catch (error1) {
                    console.log(`Yöntem 1 başarısız: ${error1.message}`);
                    
                    // 3.2 Upload butonu ve file chooser
                    try {
                        console.log('Yöntem 2: Upload butonu + file chooser');
                        
                        // Upload product image butonunu bul
                        const uploadButton = await page.locator('text="Upload product image"').first();
                        await uploadButton.click();
                        await page.waitForTimeout(2000);
                        
                        // File chooser'ı bekle
                        const fileChooser = await page.waitForEvent('filechooser', { timeout: 10000 });
                        await fileChooser.setFiles(imagePath);
                    } catch (error2) {
                        console.log(`Yöntem 2 başarısız: ${error2.message}`);
                        
                        // 3.3 Alternatif selektörler
                        try {
                            console.log('Yöntem 3: Alternatif selektörler');
                            
                            const selectors = [
                                'button:has-text("Upload")',
                                'div:has-text("Upload product image")',
                                'div.upload-area',
                                '[aria-label="Upload"]',
                                '.upload-button'
                            ];
                            
                            for (const selector of selectors) {
                                try {
                                    const element = await page.$(selector);
                                    if (element) {
                                        await element.click();
                                        await page.waitForTimeout(2000);
                                        
                                        // File chooser'ı bekle
                                        const fileChooser = await page.waitForEvent('filechooser', { timeout: 5000 });
                                        await fileChooser.setFiles(imagePath);
                                        console.log(`${selector} selektörü ile yükleme başarılı`);
                                        break;
                                    }
                                } catch (e) {
                                    continue;
                                }
                            }
                        } catch (error3) {
                            console.log(`Yöntem 3 başarısız: ${error3.message}`);
                            throw new Error('Hiçbir görsel yükleme yöntemi başarılı olmadı');
                        }
                    }
                }
                
                await page.waitForTimeout(5000);
                await takeScreenshot(page, '03-image-uploaded');
                console.log('Görsel yüklendi!');
                
                // 4. ÜRÜN AÇIKLAMASI
                console.log('\nADIM 4: Ürün açıklaması giriliyor...');
                
                try {
                    // Metin alanını bul
                    const textSelectors = [
                        'textarea',
                        'input[placeholder*="speech text"]',
                        'input[placeholder*="text"]',
                        'input[type="text"]',
                        '[contenteditable="true"]'
                    ];
                    
                    for (const selector of textSelectors) {
                        try {
                            const textField = await page.$(selector);
                            if (textField) {
                                await textField.fill(productDescription);
                                console.log(`${selector} ile metin girildi`);
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                } catch (error) {
                    console.log(`Metin girme hatası: ${error.message}`);
                }
                
                await page.waitForTimeout(2000);
                
                // 5. DİL AYARI
                console.log('\nADIM 5: Dil Türkçe yapılıyor...');
                
                try {
                    // English butonunu bul
                    const englishSelectors = [
                        'text="English"',
                        'button:has-text("English")',
                        'div:has-text("English")',
                        'select[name*="language"]'
                    ];
                    
                    for (const selector of englishSelectors) {
                        try {
                            const englishElement = await page.$(selector);
                            if (englishElement) {
                                await englishElement.click();
                                await page.waitForTimeout(2000);
                                
                                // Turkish seçeneğini bul
                                const turkishSelectors = [
                                    'text="Turkish"',
                                    'div:has-text("Turkish")',
                                    'option[value="tr"]'
                                ];
                                
                                for (const turkishSelector of turkishSelectors) {
                                    try {
                                        const turkishElement = await page.$(turkishSelector);
                                        if (turkishElement) {
                                            await turkishElement.click();
                                            console.log('Dil Türkçe yapıldı');
                                            break;
                                        }
                                    } catch (e) {
                                        continue;
                                    }
                                }
                                
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                } catch (error) {
                    console.log(`Dil değiştirme hatası: ${error.message}`);
                }
                
                await page.waitForTimeout(2000);
                await takeScreenshot(page, '04-form-completed');
                
                // 6. CONTINUE BUTONU
                console.log('\nADIM 6: Continue butonuna basılıyor...');
                
                try {
                    // Continue butonunu bul
                    const buttonSelectors = [
                        'button:has-text("Continue")',
                        'button:has-text("Generate")',
                        'button:has-text("Create")',
                        'button[type="submit"]',
                        '.btn-primary'
                    ];
                    
                    for (const selector of buttonSelectors) {
                        try {
                            const button = await page.$(selector);
                            if (button) {
                                await button.click();
                                console.log(`${selector} ile Continue butonuna basıldı`);
                                break;
                            }
                        } catch (e) {
                            continue;
                        }
                    }
                } catch (error) {
                    console.log(`Continue butonu hatası: ${error.message}`);
                }
                
                await page.waitForTimeout(10000);
                await takeScreenshot(page, '05-finished');
                
                console.log('\n=== BAŞARILI ===');
                console.log('Video oluşturma süreci başlatıldı!');
                console.log('Otomasyon tamamlandı.');
                
            } catch (error) {
                console.error(`\nHATA: ${error.message}`);
                await takeScreenshot(page, 'error-final');
                throw error;
            } finally {
                // Temizlik
                try {
                    if (fs.existsSync(imagePath)) {
                        fs.unlinkSync(imagePath);
                    }
                } catch (e) {
                    console.log(`Görsel dosyası silinemedi: ${e.message}`);
                }
                
                await browser.close();
            }
        }

        run().catch(error => {
            console.error('Otomasyon hatası:', error);
            process.exit(1);
        });
        EOL
        
        echo "Automation script created: creati-automation.mjs"
      
    - name: Run automation
      run: node creati-automation.mjs
      env:
        EMAIL: ${{ github.event.inputs.email }}
        PASSWORD: ${{ secrets.CREATI_STUDIO_PASSWORD }}
        DESCRIPTION: ${{ github.event.inputs.productDescription }}
        IMAGE_URL: ${{ github.event.inputs.productImageUrl }}
        PLAYWRIGHT_BROWSERS_PATH: '/home/runner/.cache/ms-playwright'
    
    - name: Upload debug files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-files-${{ github.run_number }}
        path: |
          *.png
          *.log
        retention-days: 5
